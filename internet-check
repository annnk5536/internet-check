#!/usr/bin/env python
import subprocess, re, shlex
import appindicator, glib, gtk, requests, signal, time, pynotify, threading, gobject

APPINDICATOR_ID = 'internet-check'
ping_host_name = "google.com"

class InternetCheck:
	def __init__(self):
		# param1: appindicator identifier
		# param2: appindicator default icon name
		# param3: appindicator category
		self.indicator = appindicator.Indicator(APPINDICATOR_ID, gtk.STOCK_NO, appindicator.CATEGORY_COMMUNICATIONS)

		# activate the status of the indicator
		self.indicator.set_status( appindicator.STATUS_ACTIVE )

		# trigger to build the menu
		self.menu = gtk.Menu()

		# create a menu item for showing about indicator section
		item_about = gtk.MenuItem("About - Internet Check Indicator using ping")
		self.menu.append( item_about )

		# create a menu item for exiting the app
		item_exit = gtk.MenuItem("Exit")
		item_exit.connect( 'activate', self.exit_indicator )
		self.menu.append( item_exit )

		self.menu.show_all()
		self.indicator.set_menu ( self.menu )

		self.ping_timeout = 3
		self.update_interval = 5

		self.indicator.set_icon( gtk.STOCK_NO )
		self.update_ui()

		glib.timeout_add_seconds ( self.update_interval, self.update_timeout )

	def ping(self, host_name):
		# pings google.com and returns a dot . on success and an X on failure
		ping_command = "ping -i " + str(self.ping_timeout) + " -c 1 " + host_name
		process = subprocess.Popen( shlex.split( ping_command ), stdout = subprocess.PIPE )
		output = process.stdout.read()
		matches = re.findall(r"time=[0-9]\w+", output)
		if len(matches):
			# print matches[0].split("=")[-1]
			return matches[0].split("=")[-1]
		else: 
			return False
		# return check_output( ["sh", "-c", "{ timeout " + str( self.ping_timeout ) + " ping -w 3 -c 2 -i 1 google.com > /dev/null 2>&1 && echo -n . ; } || { echo -n X ; }"] )

	def update_timeout(self):
		# this function will be called every {update_interval} seconds by glib
		self.update_ui()

		# returning True so that it doesn't get exited from timeout_add_seconds function
		return True

	def update_ui(self):
		# ping the host and get the response
		ping_response = self.ping(ping_host_name)

		## TODO ##
		if ping_response == False:
			# if False is received, play connection_down sound
			# and change the icon to STOCK_STOP one
			print "false"
			self.indicator.set_icon( gtk.STOCK_NO )
			self.indicator.set_label( "--" )
			print self.indicator.get_icon()
		else:
			# otherwise, change to STOCK_ON icon.
			print "up"
			self.indicator.set_icon( gtk.STOCK_YES )
			self.indicator.set_label( ping_response + " ms" )
			print self.indicator.get_icon()

	def exit_indicator(self, source):
		gtk.main_quit()

	def main(self):
		gtk.main()

if __name__ == "__main__":
	# For making Ctrl+C do it's default action
	signal.signal(signal.SIGINT, signal.SIG_DFL)
	indicator = InternetCheck()
	indicator.main()